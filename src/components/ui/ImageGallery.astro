---
import Image from "./Image.astro";
import type { Image as TImage } from "@/types";

interface Props {
  type?: "big-right" | "big-left";
  images: TImage[];
}
const { type, images } = Astro.props;

let className: undefined | string = undefined;

if (typeof type !== "undefined" && type === "big-right") {
  className = "image-gallery--big-right";
}

if (typeof type !== "undefined" && type === "big-left") {
  className = "image-gallery--big-left";
}
---

<div class:list={["image-gallery", className]}>
  {
    images.map((image) => (
      <div class="image-gallery__image-cont">
        <Image image={image} />
      </div>
    ))
  }
</div>

<style lang="scss">
  @use "@/styles/vars";

  .image-gallery {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(1, 1fr);
    gap: vars.spacing(1);
    width: 100%;

    @include vars.break("tablet", "down") {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  .image-gallery--big-right {
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(2, 1fr);

    grid-template-areas:
      ". . main main"
      ". . main main";

    @include vars.break("tablet", "down") {
      grid-template-columns: repeat(2, 1fr);
      grid-template-rows: repeat(4, 1fr);

      grid-template-areas:
        ". ."
        ". ."
        "main main"
        "main main";
    }

    .image-gallery__image-cont:nth-child(1) {
      grid-area: main;
    }
  }

  .image-gallery--big-left {
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(2, 1fr);

    grid-template-areas:
      "main main . ."
      "main main . .";

    @include vars.break("tablet", "down") {
      grid-template-columns: repeat(2, 1fr);
      grid-template-rows: repeat(4, 1fr);

      grid-template-areas:
        ". ."
        ". ."
        "main main"
        "main main";
    }

    .image-gallery__image-cont:nth-child(1) {
      grid-area: main;
    }
  }

  .image-gallery__image-cont {
    aspect-ratio: 1;
    position: relative;
  }
</style>
